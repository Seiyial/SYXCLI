#!/usr/bin/env bash

echo $SYXCLI_DIR

# Debug function is most necessary, thus goes first
syxcli_info () {
	[[ -z $SYXCLI_VERBOSE ]] || echo "<Ð–CLI> $1"
}

# Next is the arg passing; don't want to introduce unnecessary functions to the autorun that slows it down
syxcli_assign_task () {
	# This function ensures there's only one task; throws errors otherwise
	if [[ -z $SYXCLI_START_TASK ]]
	then
		SYXCLI_START_TASK="$1"
	else
		syxcli_info "ERROR: Invalid command (multiple SYXCLI_START_TASK assigned)"
		syxcli_info "Please choose only one of the following: autorun, install, jumpstart, activate, check (syxcli_assign_task)"
	fi
}

syxcli_parse_args () {
	SYXCLI_START_TASK=""
	syxcli_dont_set_dir=""
	for arg in "$@"; do
		case "$arg" in
			"install"|"i")
				syxcli_info "Arg: setup"
				syxcli_assign_task "setup"
				;;
			"autorun")
				syxcli_info "Arg: autorun"
				syxcli_assign_task "autorun"
				;;
			"--silent-fail"|"-f")
				syxcli_info "Arg: --silent-fail"
				syxcli_silent_fail="true"
				;;
			"--silent-pass"|"-s")
				syxcli_info "Arg: --silent-pass (SYXCLI_SILENT)"
				SYXCLI_SILENT="true"
				;;
			"--clovers"|"-c")
				syxcli_info "Arg: --clovers"
				SYXCLI_CLOVERS="true"
				;;
			"--verbose"|"-v")
				syxcli_info "Arg: --verbose"
				SYXCLI_VERBOSE=true
				;;
			"--from-rc"|"-r")
				# Expect $SYXCLI_DIR to be set before executing syxcli.
				syxcli_dont_set_dir="true"
				;;
			*)
				[[ $syxcli_silent_fail == "true" ]] || syxcli_show_instructions_and_quit
				;;
		esac
	done
}

[[ $SYXCLI_VERBOSE == "true" ]] && printf "\n<*> SYXCLI <*>\n\n"

syxcli_fail () {
	[[ $syxcli_silent_fail == "true" ]] || echo "SYXCLI ERROR: $1"
}

syxcli_show_instructions_and_quit () {
	echo "Usage: syxcli [action] [options]

	- Actions (choose one):
	install               Run initial setup based on your usage mode
	autorun               Check if settings are found, then activate modules
	(no input)            Display main menu

	- Options:
	--silent-fail, -f     Do not show failure output
	--silent, -s          Silently execute (but still show errors
	                      unless silent-fail is passed in as well)
	--clovers, -c         Display the SYXCMD Clover field
	--verbose, -v         Show all debug messages
	--from-rc, -r         Flag if running from ~/.bashrc, ~/.bash_profile
	                      or ~/.zshrc. Set \$SYXCLI_DIR to your syxcli
	                      installation path before running syxcli.
	"
	# exit 1
}

syxcli_get_dir () {
	# https://stackoverflow.com/questions/59895/get-the-source-directory-of-a-bash-script-from-within-the-script-itself
	# This function returns the Directory of the file in which it is called
	# and assigns it to $SYXCLI_DIR.
	syxcli_util_bashsource="${BASH_SOURCE[0]}"
	while [ -h "$SOURCE" ]; do
		# resolve $syxcli_util_bashsource until the file is no longer a symlink
		SYXCLI_DIR="$( cd -P "$( dirname "$syxcli_util_bashsource" )" >/dev/null 2>&1 && pwd )"
		syxcli_util_bashsource="$(readlink "$syxcli_util_bashsource")"
		[[ $syxcli_util_bashsource != /* ]] && syxcli_util_bashsource="$SYXCLI_DIR/$syxcli_util_bashsource"
		# if $SOURCE was a relative symlink, we need to resolve it relative
		# to the path where the symlink file was located
	done

	SYXCLI_DIR="$( cd -P "$( dirname "$syxcli_util_bashsource" )" >/dev/null 2>&1 && pwd )"
	syxcli_info "Set SYXCLI_DIR to \"$SYXCLI_DIR\" (syxcli_get_dir)"
}

syxcli_get_dir_rm_bin () {
	syxcli_get_dir
	SYXCLI_UTIL_DIR_SUFFIX="/bin"
	SYXCLI_DIR=${SYXCLI_DIR%"$SYXCLI_UTIL_DIR_SUFFIX"}
	syxcli_info "Set SYXCLI_DIR to \"$SYXCLI_DIR\" (syxcli_get_dir_rm_bin)"
}

syxcli_parse_args $@

if [[ $syxcli_dont_set_dir == "true" ]]
then
	if [[ -z $SYXCLI_DIR ]]
	then
		# must explicitly set SYXCLI_DIR before running
		# if you are running syxcli from bash_profile, zshrc etc.
		# If not, run syxcli without the -r and --from-rc flags.
		syxcli_fail "Set SYXCLI_DIR before running!"
	fi
else
	syxcli_get_dir_rm_bin
fi

case "$SYXCLI_START_TASK" in
	"autorun")
		source $SYXCLI_DIR/exec/settings.sh
		source $SYXCLI_DIR/exec/cmd.sh
		source $SYXCLI_DIR/exec/dirtool.sh
		syxcli_check_settings_exist
		syxcli_source_settings_if_exist
		syxcli_activate_cmd
		syxcli_activate_dlink
		;;
	"setup")
		source $SYXCLI_DIR/exec/settings.sh
		source $SYXCLI_DIR/exec/installer.sh
		syxcli_check_settings_exist
		syxcli_help_create_settings_if_need
		syxcli_install_choice=""
		syxcli_run_installer
		;;
	"")
		syxcli_show_instructions_and_quit
		;;
	*)
		syxcli_show_instructions_and_quit
		;;
esac

